#!/bin/bash

# Usage
#   gen-image [OPTIONS] SOURCE OUTPUT

# This script generates an image from the given source directory.


TMPDIR="/tmp/aplus-hdd"
LIVE_MODE=0

case "$1" in
    -h|--help)
        echo "Usage: gen-image [OPTIONS] SOURCE OUTPUT"
        echo "  SOURCE: The source directory to generate an image from."
        echo "  OUTPUT: The destination file to generate the image to."
        echo "  OPTIONS:"
        echo "    -h, --help: Show this help message."
        echo "        --live: Generate a live image."
        exit 0
        ;;
    --live)
        LIVE_MODE=1
        shift
        ;;
    *)
        ;;
esac


SOURCE="$1"
OUTPUT="$2"

if [ -z "$SOURCE" ]; then
    echo "No source directory specified."
    exit 1
fi

if [ -z "$OUTPUT" ]; then
    echo "No destination file specified."
    exit 1
fi

if [ -e $TMPDIR ]; then
    sudo rm -rf $TMPDIR
fi




function compress {

    echo "    GZIP    $(realpath --relative-base=$TMPDIR/p1 $1)"
    sudo gzip $1

}


function losetup_new_device {

    local output=$1
    local offset=$2
    local size=$3

    if [ -z $output ]; then
        echo "losetup_new_device: output is empty"
        exit 1
    fi

    if [ -z $offset ]; then
        offset=0
    fi


    local device=$(sudo losetup -f)

    if [ -z $device ]; then
        echo "losetup_new_device: no free device found"
        exit 1
    fi

    if [ -z $size ]; then
        sudo losetup $device $output --offset $offset
    else
        sudo losetup $device $output --offset $offset --sizelimit $size
    fi

    if [ $? -ne 0 ]; then
        echo "losetup_new_device: losetup failed"
        exit 1
    fi


    echo $device

}




if [ ! -f $OUTPUT ]; then

    # Create the actual disk image - 2GiB
    dd status=none if=/dev/zero of=$OUTPUT bs=4M count=512

    if [ $? -ne 0 ]; then
        echo "gen-image: failed to create the disk image"
        exit 1
    fi
    
    
    # Make partition table, partition and set it bootable
    echo -e "n\n\n\n93716\nef00\nn\n\n\n\n\nw\ny\n" | gdisk $OUTPUT &> /dev/null
    sync

    # Map the partitions from the image file
    disk=$(losetup_new_device $OUTPUT 0)
    boot=$(losetup_new_device $OUTPUT 1048576 46934528)
    part=$(losetup_new_device $OUTPUT 48234496)

    # Make filesystem on the boot partition
    sudo mkfs.vfat $boot -n "EFI" -F 32 &> /dev/null

    # Make filesystem on the first partition
    if [ $LIVE_MODE -eq 1 ]; then
        sudo mkfs.vfat -F32 $part &> /dev/null
    else
        sudo mkfs.ext2 $part &> /dev/null
    fi

    # Mount the filesystem via loopback
    mkdir -p $TMPDIR/boot
    mkdir -p $TMPDIR/p1

    sudo mount -t vfat $boot $TMPDIR/boot

    if [ $LIVE_MODE -eq 1 ]; then
        sudo mount -t vfat $part $TMPDIR/p1
    else
        sudo mount -t ext2 $part $TMPDIR/p1
    fi

    # Install Grub
    sudo grub-install --no-floppy                                                                       \
                 --target=x86_64-efi                                                                    \
                 --removable                                                                            \
                 --no-nvram                                                                             \
                 --force                                                                                \
                 --modules="part_gpt part_msdos fat ext2 normal multiboot2 gzio progress all_video"     \
                 --efi-directory=$TMPDIR/boot                                                           \
                 --root-directory=$TMPDIR/p1                                                            \
                 --boot-directory=$TMPDIR/p1/boot &> /dev/null                                         

    # Unmount the loopback
    sudo umount $TMPDIR/boot
    sudo umount $TMPDIR/p1

    # Unmap the image
    sudo losetup -d $disk
    sudo losetup -d $boot
    sudo losetup -d $part
    sync

fi


# Map the partitions from the image file
part=$(losetup_new_device $OUTPUT 48234496)

# Make directories
mkdir -p $TMPDIR/p1

# Mount the filesystem via loopback
if [ $LIVE_MODE -eq 1 ]; then
    sudo mount -t vfat $part $TMPDIR/p1
else
    sudo mount -t ext2 $part $TMPDIR/p1
fi

if [ $LIVE_MODE -eq 1 ]; then

    # Clean
    sudo rm -rf $TMPDIR/p1/*

    # Make directories
    sudo mkdir -p $TMPDIR/p1/boot
    sudo mkdir -p $TMPDIR/p1/usr/lib/modules

    # Copy files
    sudo cp -rf $SOURCE/boot/* $TMPDIR/p1/boot/
    sudo cp -rf $SOURCE/usr/lib/modules/* $TMPDIR/p1/usr/lib/modules/

    # Copy grub modules
    sudo cp -rf /usr/lib/grub/x86_64-efi $TMPDIR/p1/boot/grub

    # Copy initrd
    sudo cp -f /tmp/aplus-initrd/initrd.img $TMPDIR/p1/boot/initrd.img

else

    # Clean
    sudo rm -rf $TMPDIR/p1/*

    # Copy files
    sudo cp -rf $SOURCE/* $TMPDIR/p1

    # Copy grub modules
    sudo cp -rf /usr/lib/grub/x86_64-efi $TMPDIR/p1/boot/grub

fi


# Compress boot files

for ko in $(find $TMPDIR/p1/usr/lib/modules -name "*.ko"); do
    compress $ko
done

compress $TMPDIR/p1/usr/lib/modules/exports
compress $TMPDIR/p1/boot/aplus

if [ $LIVE_MODE -eq 1 ]; then
    compress $TMPDIR/p1/boot/initrd.img
fi



# Unmount the loopback
sudo umount $TMPDIR/p1

# Unmap the image
sudo losetup -d $part
sync

# Clean
sudo rm -rf $TMPDIR
